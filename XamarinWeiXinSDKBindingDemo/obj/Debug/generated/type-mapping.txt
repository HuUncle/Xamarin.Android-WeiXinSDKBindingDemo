com/tencent/mm/opensdk/constants/Build = Com.Tencent.MM.Opensdk.Constants.Build
  EMOJI_SUPPORTED_SDK_INT = EmojiSupportedSdkInt
  FAVORITE_SUPPPORTED_SDK_INT = FavoriteSuppportedSdkInt
  MESSAGE_ACTION_SUPPPORTED_SDK_INT = MessageActionSuppportedSdkInt
  MIN_SDK_INT = MinSdkInt
  MUSIC_DATA_URL_SUPPORTED_SDK_INT = MusicDataUrlSupportedSdkInt
  OPENID_SUPPORTED_SDK_INT = OpenidSupportedSdkInt
  PAY_SUPPORTED_SDK_INT = PaySupportedSdkInt
  SCAN_QRCODE_AUTH_SUPPORTED_SDK_INT = ScanQrcodeAuthSupportedSdkInt
  SDK_INT = SdkInt
  SDK_VERSION_NAME = SdkVersionName
  TIMELINE_SUPPORTED_SDK_INT = TimelineSupportedSdkInt
  getMajorVersion()I = MajorVersion
  getMinorVersion()I = MinorVersion
com/tencent/mm/opensdk/constants/ConstantsAPI = Com.Tencent.MM.Opensdk.Constants.IConstantsAPI
  ACTION_HANDLE_APP_REGISTER = ActionHandleAppRegister
  ACTION_HANDLE_APP_UNREGISTER = ActionHandleAppUnregister
  ACTION_REFRESH_WXAPP = ActionRefreshWxapp
  APP_PACKAGE = AppPackage
  APP_SUPORT_CONTENT_TYPE = AppSuportContentType
  CHECK_SUM = CheckSum
  COMMAND_ADD_CARD_TO_EX_CARD_PACKAGE = CommandAddCardToExCardPackage
  COMMAND_CHOOSE_CARD_FROM_EX_CARD_PACKAGE = CommandChooseCardFromExCardPackage
  COMMAND_CREATE_CHATROOM = CommandCreateChatroom
  COMMAND_GETMESSAGE_FROM_WX = CommandGetmessageFromWx
  COMMAND_JOIN_CHATROOM = CommandJoinChatroom
  COMMAND_JUMP_BIZ_TEMPSESSION = CommandJumpBizTempsession
  COMMAND_JUMP_BIZ_WEBVIEW = CommandJumpBizWebview
  COMMAND_JUMP_TO_BIZ_PROFILE = CommandJumpToBizProfile
  COMMAND_LAUNCH_BY_WX = CommandLaunchByWx
  COMMAND_OPEN_BUSI_LUCKY_MONEY = CommandOpenBusiLuckyMoney
  COMMAND_OPEN_RANK_LIST = CommandOpenRankList
  COMMAND_OPEN_WEBVIEW = CommandOpenWebview
  COMMAND_PAY_BY_WX = CommandPayByWx
  COMMAND_SENDAUTH = CommandSendauth
  COMMAND_SENDMESSAGE_TO_WX = CommandSendmessageToWx
  COMMAND_SHOWMESSAGE_FROM_WX = CommandShowmessageFromWx
  COMMAND_UNKNOWN = CommandUnknown
  CONTENT = Content
  SDK_VERSION = SdkVersion
com/tencent/mm/opensdk/diffdev/DiffDevOAuthFactory = Com.Tencent.MM.Opensdk.Diffdev.DiffDevOAuthFactory
  MAX_SUPPORTED_VERSION = MaxSupportedVersion
  VERSION_1 = Version1
  getDiffDevOAuth()Lcom/tencent/mm/opensdk/diffdev/IDiffDevOAuth; = DiffDevOAuth
  getDiffDevOAuth(I)Lcom/tencent/mm/opensdk/diffdev/IDiffDevOAuth; = GetDiffDevOAuth(int)
com/tencent/mm/opensdk/diffdev/IDiffDevOAuth = Com.Tencent.MM.Opensdk.Diffdev.IDiffDevOAuth
  addListener(Lcom/tencent/mm/opensdk/diffdev/OAuthListener;)V = AddListener(Com.Tencent.MM.Opensdk.Diffdev.IOAuthListener)
  auth(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lcom/tencent/mm/opensdk/diffdev/OAuthListener;)Z = Auth(string, string, string, string, string, Com.Tencent.MM.Opensdk.Diffdev.IOAuthListener)
  detach()V = Detach()
  removeAllListeners()V = RemoveAllListeners()
  removeListener(Lcom/tencent/mm/opensdk/diffdev/OAuthListener;)V = RemoveListener(Com.Tencent.MM.Opensdk.Diffdev.IOAuthListener)
  stopAuth()Z = StopAuth()
com/tencent/mm/opensdk/diffdev/OAuthErrCode = Com.Tencent.MM.Opensdk.Diffdev.OAuthErrCode
  WechatAuth_Err_Auth_Stopped = WechatAuthErrAuthStopped
  WechatAuth_Err_Cancel = WechatAuthErrCancel
  WechatAuth_Err_JsonDecodeErr = WechatAuthErrJsonDecodeErr
  WechatAuth_Err_NetworkErr = WechatAuthErrNetworkErr
  WechatAuth_Err_NormalErr = WechatAuthErrNormalErr
  WechatAuth_Err_OK = WechatAuthErrOK
  WechatAuth_Err_Timeout = WechatAuthErrTimeout
  getCode()I = Code
  toString()Ljava/lang/String; = ToString()
  valueOf(Ljava/lang/String;)Lcom/tencent/mm/opensdk/diffdev/OAuthErrCode; = ValueOf(string)
  values()[Lcom/tencent/mm/opensdk/diffdev/OAuthErrCode; = Values()
com/tencent/mm/opensdk/diffdev/OAuthListener = Com.Tencent.MM.Opensdk.Diffdev.IOAuthListener
  onAuthFinish(Lcom/tencent/mm/opensdk/diffdev/OAuthErrCode;Ljava/lang/String;)V = OnAuthFinish(Com.Tencent.MM.Opensdk.Diffdev.OAuthErrCode, string)
  onAuthGotQrcode(Ljava/lang/String;[B)V = OnAuthGotQrcode(string, byte[])
  onQrcodeScanned()V = OnQrcodeScanned()
com/tencent/mm/opensdk/modelbase/BaseReq = Com.Tencent.MM.Opensdk.Modelbase.BaseReq
  <init>()V = .ctor()
  openId = OpenId
  transaction = Transaction
  getType()I = Type
  checkArgs()Z = CheckArgs()
  fromBundle(Landroid/os/Bundle;)V = FromBundle(Android.OS.Bundle)
  toBundle(Landroid/os/Bundle;)V = ToBundle(Android.OS.Bundle)
com/tencent/mm/opensdk/modelbase/BaseResp = Com.Tencent.MM.Opensdk.Modelbase.BaseResp
  <init>()V = .ctor()
  errCode = errCode
  errStr = ErrStr
  openId = OpenId
  transaction = Transaction
  getType()I = Type
  checkArgs()Z = CheckArgs()
  fromBundle(Landroid/os/Bundle;)V = FromBundle(Android.OS.Bundle)
  toBundle(Landroid/os/Bundle;)V = ToBundle(Android.OS.Bundle)
com/tencent/mm/opensdk/modelbiz/AddCardToWXCardPackage = Com.Tencent.MM.Opensdk.Modelbiz.AddCardToWXCardPackage
  <init>()V = .ctor()
com/tencent/mm/opensdk/modelbiz/ChooseCardFromWXCardPackage = Com.Tencent.MM.Opensdk.Modelbiz.ChooseCardFromWXCardPackage
  <init>()V = .ctor()
com/tencent/mm/opensdk/modelbiz/CreateChatroom = Com.Tencent.MM.Opensdk.Modelbiz.CreateChatroom
com/tencent/mm/opensdk/modelbiz/JoinChatroom = Com.Tencent.MM.Opensdk.Modelbiz.JoinChatroom
com/tencent/mm/opensdk/modelbiz/JumpToBizProfile = Com.Tencent.MM.Opensdk.Modelbiz.JumpToBizProfile
  <init>()V = .ctor()
  JUMP_TO_HARD_WARE_BIZ_PROFILE = JumpToHardWareBizProfile
  JUMP_TO_NORMAL_BIZ_PROFILE = JumpToNormalBizProfile
com/tencent/mm/opensdk/modelbiz/JumpToBizTempSession = Com.Tencent.MM.Opensdk.Modelbiz.JumpToBizTempSession
  <init>()V = .ctor()
  SHOW_CHAT = ShowChat
  SHOW_MENU = ShowMenu
com/tencent/mm/opensdk/modelbiz/JumpToBizWebview = Com.Tencent.MM.Opensdk.Modelbiz.JumpToBizWebview
  <init>()V = .ctor()
com/tencent/mm/opensdk/modelbiz/OpenBusiLuckyMoney = Com.Tencent.MM.Opensdk.Modelbiz.OpenBusiLuckyMoney
  <init>()V = .ctor()
com/tencent/mm/opensdk/modelbiz/OpenRankList = Com.Tencent.MM.Opensdk.Modelbiz.OpenRankList
  <init>()V = .ctor()
com/tencent/mm/opensdk/modelbiz/OpenWebview = Com.Tencent.MM.Opensdk.Modelbiz.OpenWebview
  <init>()V = .ctor()
com/tencent/mm/opensdk/modelmsg/GetMessageFromWX = Com.Tencent.MM.Opensdk.Modelmsg.GetMessageFromWX
com/tencent/mm/opensdk/modelmsg/LaunchFromWX = Com.Tencent.MM.Opensdk.Modelmsg.LaunchFromWX
com/tencent/mm/opensdk/modelmsg/SendAuth = Com.Tencent.MM.Opensdk.Modelmsg.SendAuth
com/tencent/mm/opensdk/modelmsg/SendMessageToWX = Com.Tencent.MM.Opensdk.Modelmsg.SendMessageToWX
com/tencent/mm/opensdk/modelmsg/ShowMessageFromWX = Com.Tencent.MM.Opensdk.Modelmsg.ShowMessageFromWX
com/tencent/mm/opensdk/modelmsg/WXAppExtendObject = Com.Tencent.MM.Opensdk.Modelmsg.WXAppExtendObject
  <init>()V = .ctor()
  <init>(Ljava/lang/String;[B)V = .ctor(string, byte[])
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  extInfo = ExtInfo
  fileData = FileData
  filePath = FilePath
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXAppLaunchData = Com.Tencent.MM.Opensdk.Modelmsg.WXAppLaunchData
  <init>()V = .ctor()
  ACTION_HANDLE_WXAPPLAUNCH = ActionHandleWxapplaunch
  ACTION_HANDLE_WXAPP_RESULT = ActionHandleWxappResult
  ACTION_HANDLE_WXAPP_SHOW = ActionHandleWxappShow
  launchType = LaunchType
  message = Message
com/tencent/mm/opensdk/modelmsg/WXDesignerSharedObject = Com.Tencent.MM.Opensdk.Modelmsg.WXDesignerSharedObject
  <init>()V = .ctor()
  <init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V = .ctor(string, int, string, string)
  designerName = DesignerName
  designerRediretctUrl = DesignerRediretctUrl
  designerUIN = DesignerUIN
  thumburl = Thumburl
  url = Url
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXEmojiObject = Com.Tencent.MM.Opensdk.Modelmsg.WXEmojiObject
  <init>()V = .ctor()
  <init>([B)V = .ctor(byte[])
  <init>(Ljava/lang/String;)V = .ctor(string)
  emojiData = EmojiData
  emojiPath = EmojiPath
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  setEmojiData([B)V = SetEmojiData(byte[])
  setEmojiPath(Ljava/lang/String;)V = SetEmojiPath(string)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXEmojiPageSharedObject = Com.Tencent.MM.Opensdk.Modelmsg.WXEmojiPageSharedObject
  <init>()V = .ctor()
  <init>(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V = .ctor(int, int, string, string, string, string, int, string)
  desc = Desc
  iconUrl = IconUrl
  pageType = PageType
  secondUrl = SecondUrl
  tid = Tid
  title = Title
  type = Type
  url = Url
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXEmojiSharedObject = Com.Tencent.MM.Opensdk.Modelmsg.WXEmojiSharedObject
  <init>()V = .ctor()
  <init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V = .ctor(string, int, string, string)
  packageflag = Packageflag
  packageid = Packageid
  thumburl = Thumburl
  url = Url
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXFileObject = Com.Tencent.MM.Opensdk.Modelmsg.WXFileObject
  <init>()V = .ctor()
  <init>([B)V = .ctor(byte[])
  <init>(Ljava/lang/String;)V = .ctor(string)
  fileData = FileData
  filePath = FilePath
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  setContentLengthLimit(I)V = SetContentLengthLimit(int)
  setFileData([B)V = SetFileData(byte[])
  setFilePath(Ljava/lang/String;)V = SetFilePath(string)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXImageObject = Com.Tencent.MM.Opensdk.Modelmsg.WXImageObject
  <init>()V = .ctor()
  <init>([B)V = .ctor(byte[])
  <init>(Landroid/graphics/Bitmap;)V = .ctor(Android.Graphics.Bitmap)
  imageData = ImageData
  imagePath = ImagePath
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  setImagePath(Ljava/lang/String;)V = SetImagePath(string)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXLocationObject = Com.Tencent.MM.Opensdk.Modelmsg.WXLocationObject
  <init>()V = .ctor()
  <init>(DD)V = .ctor(double, double)
  lat = Lat
  lng = Lng
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXMediaMessage = Com.Tencent.MM.Opensdk.Modelmsg.WXMediaMessage
  <init>()V = .ctor()
  <init>(Lcom/tencent/mm/opensdk/modelmsg/WXMediaMessage$IMediaObject;)V = .ctor(Com.Tencent.MM.Opensdk.Modelmsg.WXMediaMessage.IMediaObject)
  ACTION_WXAPPMESSAGE = ActionWxappmessage
  description = Description
  mediaObject = mediaObject
  mediaTagName = MediaTagName
  messageAction = MessageAction
  messageExt = MessageExt
  sdkVer = SdkVer
  thumbData = ThumbData
  THUMB_LENGTH_LIMIT = ThumbLengthLimit
  title = Title
  getType()I = Type
  setThumbImage(Landroid/graphics/Bitmap;)V = SetThumbImage(Android.Graphics.Bitmap)
com/tencent/mm/opensdk/modelmsg/WXMusicObject = Com.Tencent.MM.Opensdk.Modelmsg.WXMusicObject
  <init>()V = .ctor()
  musicDataUrl = MusicDataUrl
  musicLowBandDataUrl = MusicLowBandDataUrl
  musicLowBandUrl = MusicLowBandUrl
  musicUrl = MusicUrl
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXTextObject = Com.Tencent.MM.Opensdk.Modelmsg.WXTextObject
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  text = Text
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXVideoObject = Com.Tencent.MM.Opensdk.Modelmsg.WXVideoObject
  <init>()V = .ctor()
  videoLowBandUrl = VideoLowBandUrl
  videoUrl = VideoUrl
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelmsg/WXWebpageObject = Com.Tencent.MM.Opensdk.Modelmsg.WXWebpageObject
  <init>()V = .ctor()
  <init>(Ljava/lang/String;)V = .ctor(string)
  canvasPageXml = CanvasPageXml
  extInfo = ExtInfo
  webpageUrl = WebpageUrl
  checkArgs()Z = CheckArgs()
  serialize(Landroid/os/Bundle;)V = Serialize(Android.OS.Bundle)
  type()I = Type()
  unserialize(Landroid/os/Bundle;)V = Unserialize(Android.OS.Bundle)
com/tencent/mm/opensdk/modelpay/PayReq = Com.Tencent.MM.Opensdk.Modelpay.PayReq
  <init>()V = .ctor()
  appId = AppId
  extData = ExtData
  nonceStr = NonceStr
  options = Options
  packageValue = PackageValue
  partnerId = PartnerId
  prepayId = PrepayId
  sign = Sign
  signType = SignType
  timeStamp = TimeStamp
  getType()I = Type
  checkArgs()Z = CheckArgs()
com/tencent/mm/opensdk/modelpay/PayResp = Com.Tencent.MM.Opensdk.Modelpay.PayResp
  <init>()V = .ctor()
  <init>(Landroid/os/Bundle;)V = .ctor(Android.OS.Bundle)
  extData = ExtData
  prepayId = PrepayId
  returnKey = ReturnKey
  getType()I = Type
  checkArgs()Z = CheckArgs()
com/tencent/mm/opensdk/openapi/IWXAPI = Com.Tencent.MM.Opensdk.Openapi.IWXAPI
  isWXAppInstalled()Z = IsWXAppInstalled
  isWXAppSupportAPI()Z = IsWXAppSupportAPI
  getWXAppSupportAPI()I = WXAppSupportAPI
  detach()V = Detach()
  handleIntent(Landroid/content/Intent;Lcom/tencent/mm/opensdk/openapi/IWXAPIEventHandler;)Z = HandleIntent(Android.Content.Intent, Com.Tencent.MM.Opensdk.Openapi.IWXAPIEventHandler)
  openWXApp()Z = OpenWXApp()
  registerApp(Ljava/lang/String;)Z = RegisterApp(string)
  registerApp(Ljava/lang/String;J)Z = RegisterApp(string, long)
  sendReq(Lcom/tencent/mm/opensdk/modelbase/BaseReq;)Z = SendReq(Com.Tencent.MM.Opensdk.Modelbase.BaseReq)
  sendResp(Lcom/tencent/mm/opensdk/modelbase/BaseResp;)Z = SendResp(Com.Tencent.MM.Opensdk.Modelbase.BaseResp)
  unregisterApp()V = UnregisterApp()
com/tencent/mm/opensdk/openapi/IWXAPIEventHandler = Com.Tencent.MM.Opensdk.Openapi.IWXAPIEventHandler
  onReq(Lcom/tencent/mm/opensdk/modelbase/BaseReq;)V = OnReq(Com.Tencent.MM.Opensdk.Modelbase.BaseReq)
  onResp(Lcom/tencent/mm/opensdk/modelbase/BaseResp;)V = OnResp(Com.Tencent.MM.Opensdk.Modelbase.BaseResp)
com/tencent/mm/opensdk/openapi/WXAPIFactory = Com.Tencent.MM.Opensdk.Openapi.WXAPIFactory
  createWXAPI(Landroid/content/Context;Ljava/lang/String;)Lcom/tencent/mm/opensdk/openapi/IWXAPI; = CreateWXAPI(Android.Content.Context, string)
  createWXAPI(Landroid/content/Context;Ljava/lang/String;Z)Lcom/tencent/mm/opensdk/openapi/IWXAPI; = CreateWXAPI(Android.Content.Context, string, bool)
